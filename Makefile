# Configuration
# =============
# Build information
APPNAME = Stork
VERSION = 0.0.5

# =============
PROJECT = stork
CMDS = info ls q raw rm server status submit user cred
JARFILE = lib/$(PROJECT)-$(VERSION).jar

CLASSPATH = 'lib/*:build'
DBGFLAG = -g  # Uncomment to compile with debugging info.
JFLAGS = -J-Xmx512m $(DBGFLAG) \
	-classpath $(CLASSPATH) -sourcepath $(PROJECT) -nowarn
JC  = javac
JAR = jar -J-Xmx512m
TAR = tar
LN  = ln

.PHONY: all install clean init release classes $(PROJECT)_cmds
.SUFFIXES: .java .class

# Recursive wildcard function from jgc.org.
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) \
	$(filter $(subst *,%,$2),$d))

JAVASRCS = $(call rwildcard,$(PROJECT),*.java)
CLASSES = $(JAVASRCS:%.java=build/%.class)

TO_BUILD = # Generated by "build/%.class" rule.
JC_CMD = # Set only if we need to compile something.

all: $(CLASSES) | build
	$(JC_CMD) $(TO_BUILD)
	@$(MAKE) --no-print-directory build/build_tag 
	@$(MAKE) --no-print-directory $(JARFILE)
	@$(MAKE) --no-print-directory $(PROJECT)_cmds

build:
	@mkdir -p build

$(JARFILE): $(CLASSES)
	$(JAR) cf $(JARFILE) -C build .

build/%.class: %.java | build
	$(eval TO_BUILD += $<)
	$(eval JC_CMD = $(JC) $(JFLAGS) -d build)

classes: $(TO_BUILD) | build

# Legacy underscore-named bins.
$(PROJECT)_cmds: $(patsubst %,bin/$(PROJECT)_%,$(CMDS))

bin/$(PROJECT)_%: bin/$(PROJECT)
	@[ -e $@ ] || $(LN) -s $(PROJECT) $@

release: $(PROJECT).tar.gz

src-release: $(PROJECT)-src.tar.gz

$(PROJECT).tar.gz: $(JARFILE) 
	$(TAR) czf $(PROJECT).tar.gz bin lib stork.conf --exclude='*/CVS' \
		--transform 's,^,$(PROJECT)/,'

$(PROJECT)-src.tar.gz: dist-clean
	$(TAR) czf $(PROJECT)-src.tar.gz * --exclude='*/CVS'

build/build_tag: $(CLASSES) | build
	@echo generating build tag
	@echo appname = '$(APPNAME)' >  build/build_tag
	@echo version = '$(VERSION)' >> build/build_tag
	@echo buildtime = `date`     >> build/build_tag

clean:
	$(RM) -rf build lib/$(PROJECT)-*.jar $(PROJECT).tar.gz bin/$(PROJECT)_*
